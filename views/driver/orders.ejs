<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Driver - Orders</title>
    <link rel="stylesheet" href="/css/driver/driver.css">
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <span class="fuel">Delivery Driver</span>
            <p>Doorstep Fuel Delivery</p>
        </div>
        <ul class="nav-links">
            <li><a href="/driver" class="active">Home</a></li>
            <li><a href="/driver/orders">My Orders</a></li>              
            <li><a href="/driver/vehicles">Vehicles</a></li>
            <li><a href="/logout" class="btn-danger">Logout</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="container">
            <h1>Assigned Orders</h1>
            <% if (orders.length > 0) { %>
                <table>
                    <thead>
                        <tr>
                            <th>Fuel Type</th>
                            <th>Quantity (L)</th>
                            <th>Customer</th>
                            <th>Status</th>
                            <th>Distance (km)</th>
                            <th>Location</th>
                            <th>Order Details</th>
                        </tr>
                    </thead>
                    <tbody id="orders-table-body">
                        <% orders.forEach(order => { %>
                            <tr>
                                <td><%= order.fuelId.type %></td>
                                <td><%= order.quantity %></td>
                                <td><%= order.userId.name %></td>
                                <td><%= order.status %></td>
                                <td class="distance-cell" data-lat="<%= order.latitude %>" data-lon="<%= order.longitude %>">Calculating...</td>
                                <td><button onclick="trackOrder('<%= order.latitude %>', '<%= order.longitude %>')">Track Order</button></td>
                                <td><a href="/driver/orders/<%= order._id %>">View</a></td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            <% } else { %>
                <p>No assigned orders found.</p>
            <% } %>
        </div>
    </div>

    <script>
        // Track order on Google Maps
        function trackOrder(orderLat, orderLon) {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const driverLat = position.coords.latitude;
                        const driverLon = position.coords.longitude;
                        const url = `https://www.google.com/maps/dir/?api=1&origin=${driverLat},${driverLon}&destination=${orderLat},${orderLon}`;
                        window.open(url, '_blank');
                    },
                    (error) => {
                        console.error('Error getting location:', error);
                        alert('Unable to retrieve your location.');
                    },
                    { timeout: 10000 }
                );
            } else {
                alert('Geolocation is not supported by this browser.');
            }
        }

        // Calculate Haversine distance
        function calculateDistance(lat1, lon1, lat2, lon2) {
            const toRadians = (angle) => (angle * Math.PI) / 180;
            const R = 6371;
            const dLat = toRadians(lat2 - lat1);
            const dLon = toRadians(lon2 - lon1);
            const a = Math.sin(dLat / 2) ** 2 +
                      Math.cos(toRadians(lat1)) * Math.cos(toRadians(lat2)) *
                      Math.sin(dLon / 2) ** 2;
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return R * c;
        }

        // Get driver's current location and sort orders
        function getDriverLocationAndSortOrders() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((position) => {
                    const driverLat = position.coords.latitude;
                    const driverLon = position.coords.longitude;

                    const rows = Array.from(document.querySelectorAll('#orders-table-body tr'));

                    const rowsWithDistance = rows.map(row => {
                        const cell = row.querySelector('.distance-cell');
                        const orderLat = parseFloat(cell.getAttribute('data-lat'));
                        const orderLon = parseFloat(cell.getAttribute('data-lon'));
                        const distance = calculateDistance(driverLat, driverLon, orderLat, orderLon);
                        cell.textContent = `${distance.toFixed(2)} km`;
                        return { row, distance };
                    });

                    // Sort rows by distance
                    rowsWithDistance.sort((a, b) => a.distance - b.distance);

                    const tableBody = document.getElementById('orders-table-body');
                    tableBody.innerHTML = "";
                    rowsWithDistance.forEach(item => tableBody.appendChild(item.row));

                }, (error) => {
                    console.error('Error getting driver location:', error);
                }, { timeout: 10000 });
            } else {
                console.error('Geolocation not supported');
            }
        }

        // Call on page load
        getDriverLocationAndSortOrders();
    </script>
</body>
</html>
